


class AuthProvider(ndb.Model):
    """
    AuthProvider stores the authentication credentials (eg from Facebook)
    for a User - each user may have multiple AuthProviders
    """
    _default_indexed = False
    user_id = ndb.IntegerProperty(indexed=True)
    user_info = ndb.JsonProperty(indexed=False, compressed=True)
    credentials = ndb.PickleProperty()
    password_hash = ndb.StringProperty(indexed=False)

    @classmethod
    def _get_by_auth_id(cls, auth_id):
        """Returns a AuthToken based on a auth_id."""
        
        return cls.get_by_id(id=auth_id)
    get_by_auth_id = _get_by_auth_id

    @classmethod
    def _create(cls, user, auth_id, **kwargs):
        """Create an auth_token, must specify a user_id"""
        
        auth_token = cls.get_by_id(id=auth_id)
        
        if auth_token:
            raise Exception('Trying to create a duplicate auth token')
            
        auth_token = cls(id=auth_id,user_id=user._get_id())
        auth_token.populate(**kwargs)
        auth_token.put()
        
        return auth_token
    
    @staticmethod
    def generate_auth_id(provider, uid, subprovider=None):
        """Standardized generator for auth_ids
    
        :param provider:
            A String representing the provider of the id.
            E.g.
            - 'google'
            - 'facebook'
            - 'appengine_openid'
            - 'twitter'
        :param uid:
            A String representing a unique id generated by the Provider.
            I.e. a user id.
        :param subprovider:
            An Optional String representing a more granular subdivision of a provider.
            i.e. a appengine_openid has subproviders for Google, Yahoo, AOL etc.
        :return:
            A concatenated String in the following form:
            '{provider}#{subprovider}:{uid}'
            E.g.
            - 'facebook:1111111111'
            - 'twitter:1111111111'
            - 'appengine_google#yahoo:1111111111'
            - 'appengine_google#google:1111111111'
        """
        if subprovider is not None:
            provider = '{0}#{1}'.format(provider, subprovider)
        return '{0}:{1}'.format(provider, uid)
    #
    #def _add_auth_id(self, auth_id):
    #    """A helper method to add additional auth ids to a User
    #
    #    :param auth_id:
    #        String representing a unique id for the user. Examples:
    #
    #        - own:username
    #        - google:username
    #    :returns:
    #        A tuple (boolean, info). The boolean indicates if the user
    #        was saved. If creation succeeds, ``info`` is the user entity;
    #        otherwise it is a list of duplicated unique properties that
    #        caused creation to fail.
    #    """
    #    # If the auth_id is already in the list return True
    #    if auth_id in self.auth_ids:
    #        return self
    #    if self.__class__.get_by_auth_id(auth_id):
    #        raise DuplicatePropertyError(value=['auth_id'])
    #    else:
    #        self.auth_ids.append(auth_id)
    #        self.put()
    #        return self
    #
    
